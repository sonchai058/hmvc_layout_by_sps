<?php

/**
 *
 */
class DatabaseStore_model extends CI_model
{
    private $manage_menu_module_tbl = 'manage_menu_module';
    private $tbl = 'manage_database_store';
    private $manage_database_store_type_tbl = 'manage_database_store_type';
    private $manage_database_store_data_tbl = 'manage_database_store_data';
    private $proto = [
        'from' => 0,
        'size' => 100,
        'query' => [
        ]
    ];

    private $es_type = 'http://localhost:9200/cmu_web/';
    private $analyzer = 'standard';

    private $default_field = ['title', 'content'];
    private $val_lang = 'th';
    private $per_page = 10;


    function __construct()
    {
        parent::__construct();
        $this->load->library('session');
        $this->user_id = $this->session->cmu_web_session['id'];

        if (!empty($_SESSION['LANGUAGE'])) {
            $this->val_lang = strtolower($_SESSION['LANGUAGE']);
        }else{
            $this->val_lang = 'th';

        }
        
    }

    private function fnc_filterData($data)
    {

        $filterData = [];
        if(!empty($data['filter']['data'])) {
            foreach($data['filter']['data'] as $key => $value) {
                foreach($value as $k => $v) {
                    $filterData[] = $v;
                }
            }

        }

        if(!empty($filterData)) {
            $this->db->where_in('t2.id_store', $filterData);
        }
    }

    // private function fnc_getDataFilter($filterData, $filterDataAll)
    // {
    //     $this->db->select('t1.*');
    //     $this->db->where_in('t2.id_store', $filterData);

    //     if(!empty($filterDataAll)) {
    //         $this->db->where_in('t2.id_store', $filterDataAll);
    //     }
    //     $this->db->where('t1.show_status', 1);
    //     $this->db->join($this->manage_database_store_data_tbl.' t2', 't2.id = t1.id');
    //     $this->db->group_by('t1.id');
    //     $data = $this->db->get($this->tbl.' t1')->result_array();

    //     if(!empty($data)) {
    //         return array_column($data, 'id');
    //     } else {
    //         return ;
    //     }
    // }

    public function find($data, $offset)
    {
        $this->db->limit($data['per_page'], $offset);

        $this->db->select('t1.id, t1.title, t1.url, IF(t1.description'.($this->val_lang == 'th' ? '' : '_en').' <> "" OR t1.description'.($this->val_lang == 'th' ? '' : '_en').' <> NULL, t1.description'.($this->val_lang == 'th' ? '' : '_en').', t1.description) as description', false);
        $text = trim($data['command']['stext']);
        if($text != '') {
            $this->db->where('UPPER(SUBSTRING(t1.title, 1 ,1)) = "'.$text.'"');
        }
        $this->fnc_filterData($data);
        $this->db->where('t1.show_status', 1);
        $this->db->join($this->manage_database_store_data_tbl.' t2', 't2.id = t1.id');
        $this->db->order_by('t1.s_order', 'asc');
        $this->db->order_by('t1.time_create', 'desc');
        $this->db->group_by('t1.id');
        $data = $this->db->get($this->tbl.' t1')->result_array();
        if(!empty($data)) {
            $getData = [];
            foreach($data as $key => $value) {
                $dataStore = $this->fnc_getStoreData($value['id']);
                if(!empty($dataStore['resource_type'])) {
                    $value['resource_type'] = implode(' , ', $dataStore['resource_type']);
                } else {
                    $value['resource_type'] = [];
                }

                if(!empty($dataStore['branch'])) {
                    $value['branch'] = implode(' , ', $dataStore['branch']);
                } else {
                    $value['branch'] = [];
                }

                if(!empty($dataStore['subscription'])) {
                    $value['subscription'] = implode(' , ', $dataStore['subscription']);
                } else {
                    $value['subscription'] = [];
                }
                $getData[] = $value;
            }
            return $getData;
        } else {
            return [];
        }
    }

    private function fnc_getStoreData($id)
    {
        $this->db->select('t1.type_store, IF(t2.fld_value'.($this->val_lang == 'th' ? '' : '_en').' <> "" OR t2.fld_value'.($this->val_lang == 'th' ? '' : '_en').' <> NULL, t2.fld_value'.($this->val_lang == 'th' ? '' : '_en').', t2.fld_value) as label');
        $this->db->where('t1.id', $id);
        $this->db->join($this->manage_database_store_type_tbl.' t2', 't2.id = t1.id_store');
        $data = $this->db->get($this->manage_database_store_data_tbl.' t1')->result_array();

        if (!empty($data)) {
            $getData = [];
            foreach($data as $key => $value) {
                $getData[$value['type_store']][] = $value['label'];
            }
            return $getData;
        } else {
            return [];
        }

    }

    public function getTotal($data)
    {
        $text = trim($data['command']['stext']);
        if($text != '') {
            $this->db->where('UPPER(SUBSTRING(t1.title, 1 ,1)) = "'.$text.'"');
        }
        $this->fnc_filterData($data);
        $this->db->where('t1.show_status', 1);
        $this->db->join($this->manage_database_store_data_tbl.' t2', 't2.id = t1.id');
        $this->db->group_by('t1.id');
        return $this->db->get($this->tbl.' t1')->num_rows();
    }

    public function filter($query, $param)
    {
        // $filter_type = $param['filter_include'] ? 'filter' : 'must_not';
        $menu_filter = ['bool' => ['should' => []]];

        // # กรองตามเมนู
        // $lvl1_pk = $param['data']['menu'];
        // if (count($lvl1_pk) > 0) {
        //     $menu_filter['bool']['should'][] = [
        //         'bool' => [
        //             'must' => [
        //                 ['term' => ['category' => 'menu']],
        //                 ['terms' => ['lvl1_pk' => $lvl1_pk]]
        //             ]
        //         ]
        //     ];
        // }


        // $menu_top = $param['data']['menu_top'];
        // if (count($menu_top) > 0) {
        //     $menu_filter['bool']['should'][] = [
        //         'bool' => [
        //             'must' => [
        //                 ['term' => ['category' => 'menu_top']],
        //                 ['terms' => ['lvl1_pk' => $menu_top]]
        //             ]
        //         ]
        //     ];
        // }

        // # กรองตามข่าว
        // $news = $param['data']['news'];
        // if (count($news) > 0) {
        //     $menu_filter['bool']['should'][] = [
        //         'bool' => [
        //             'must' => [
        //                 ['term' => ['category' => 'news']],
        //                 ['terms' => ['lvl1_pk' => $news]]
        //             ]
        //         ]
        //     ];
        // }

        // # กรองตาม Online
        // $online_library_course = $param['data']['online_library_course'];
        // if (count($online_library_course) > 0) {
        //     $menu_filter['bool']['should'][] = [
        //         'bool' => [
        //             'must' => [
        //                 ['term' => ['category' => 'online_library_course']]
        //             ]
        //         ]
        //     ];
        // }

        # กรองตามแหล่งข้อมูล
        if (count($menu_filter['bool']['should']) > 0)
            $query['query']['bool'][$filter_type][] = $menu_filter;

        # กรองตามปี
        // $pubyear = $param['data']['pubyear'];
        // if (count($pubyear) > 0)
        //     $query['query']['bool'][$filter_type][] = ['terms' => ['pubyear' => $pubyear]];

        return $query;
    }

    // public function find($query, $offset = 0)
    // {
    //     $query['from'] = $offset;

    //     $query['_source'] = [
    //         'includes' => ['pk', 'category', 'lvl1_pk', 'lvl2_pk', 'title', 'title_en', 'author', 'pubyear', 'url', 'create_dt', 'time_update']
    //     ];


    //     $post = $this->input->post('data');
    //     $textData = json_decode($post, true);
    //     $textData = $textData['command']['stext'];

    //     $query['highlight'] = [
    //         'pre_tags' => ["<span class=\"elastic_highlighter\">"],
    //         'post_tags' => ["</span>"],
    //         'order' => "score",
    //         'encoder' => "html",
    //         'fragment_size' => 400,
    //         'number_of_fragments' => 1,
    //         'no_match_size' => 400,
    //         'fields' => [
    //             'content' => new ArrayObject(),
    //             'content_en' => new ArrayObject(),
    //         ]
    //     ];
    //     $url = $this->es_type . '_search';
    //     $output = $this->fnc_ElasticCurl($query, $url);
    //     $rs = json_decode($output, true);
    //     $data = [
    //         'total' => 0,
    //         'list' => []
    //     ];

    //     if (!isset($rs['hits'])) return $data;

    //     $data['total'] = $rs['hits']['total'];
    //     foreach ($rs['hits']['hits'] as $ele) {

    //         $source = $ele['_source'];

    //         if (!empty($ele['highlight'])) {
    //             if (!empty($ele['highlight']['content_en']) && !empty($ele['highlight']['content_en'][0])) {
    //                 if(!empty($textData) && !empty(strpos($ele['highlight']['content_en'][0], '<span class="elastic_highlighter">'))) {
    //                     $highlight['content'] = html_entity_decode($ele['highlight']['content_en'][0]);
    //                 } else if(!empty($textData) && empty(strpos($ele['highlight']['content_en'][0], '<span class="elastic_highlighter">'))) {
    //                     $highlight['content'] = html_entity_decode($ele['highlight']['content'][0]);
    //                 } else {
    //                     if($this->val_lang == 'en') {
    //                         if(!empty($ele['highlight']['content_en'][0])) {
    //                             $highlight['content'] = html_entity_decode($ele['highlight']['content_en'][0]);
    //                         } else {
    //                             $highlight['content'] = html_entity_decode($ele['highlight']['content'][0]);
    //                         }
    //                     } else {
    //                         $highlight['content'] = html_entity_decode($ele['highlight']['content'][0]);
    //                     }
    //                 }
    //             } else {
    //                 if($this->val_lang == 'en') {
    //                     if(!empty($ele['highlight']['content_en'][0])) {
    //                         $highlight['content'] = html_entity_decode($ele['highlight']['content_en'][0]);
    //                     } else {
    //                         $highlight['content'] = html_entity_decode($ele['highlight']['content'][0]);
    //                     }
    //                 } else {
    //                     $highlight['content'] = html_entity_decode($ele['highlight']['content'][0]);
    //                 }
    //             }
    //             $highlight['content'] = str_replace('&nbsp;', '', $highlight['content']);
    //             $highlight['content'] = str_replace('&amp;', '', $highlight['content']);
    //             $highlight['content'] = str_replace('&ldquo;', '', $highlight['content']);
    //             $highlight['content'] = str_replace('&rdquo;', '', $highlight['content']);
    //             $highlight['content'] = str_replace('nbsp;', '', $highlight['content']);
    //             $highlight['content'] = str_replace('amp;', '', $highlight['content']);
    //             $highlight['content'] = str_replace('ldquo;', '', $highlight['content']);
    //             $highlight['content'] = str_replace('rdquo;', '', $highlight['content']);
    //             $highlight['content'] = strip_tags($highlight['content']);
    //             $highlight['content'] = str_ireplace('<span class="elastic_highlighter">', '', $highlight['content']);
    //             $highlight['content'] = str_ireplace('<span>', '', $highlight['content']);
    //             $highlight['content'] = str_ireplace('</span>', '', $highlight['content']);
    //             $highlight['content'] = str_ireplace($textData, '<span class="elastic_highlighter">' . $textData . '</span>', $highlight['content']);
    //             $source['content'] = $highlight['content'];
    //         }

    //         if (isset($source['lvl1_pk']) && ($source['category'] == 'menu' || $source['category'] == 'menu_top')) {
    //             $source['lvl1_title'] = $this->fnc_getMenuTitle($source['lvl1_pk'], $source['category']);
    //             $url = $this->fnc_getMenuModuleLink($source['pk'], $source['category']);
    //             if (!empty($url)) {
    //                 $source['target'] = $url['target'];
    //                 $source['url'] = $url['url'];
    //             } else {
    //                 $source['url'] = base_url() . $source['url'];
    //                 $source['target'] = '';
    //             }
    //         } else if (isset($source['lvl1_pk']) && $source['category'] == 'news') {
    //             $source['lvl1_title'] = $this->fnc_getNewsTitle($source['lvl1_pk']);
    //             $source['url'] = base_url() . $source['url'];
    //             $source['target'] = '';
    //         } else if ($source['category'] == 'online_library_course') {
    //             $source['url'] = $source['url'];
    //             $source['target'] = '_blank';
    //         } else {
    //             $source['url'] = base_url() . $source['url'];
    //             $source['target'] = '';
    //         }


    //         if (isset($source['lvl2_pk']) && ($source['category'] == 'menu' || $source['category'] == 'menu_top')) {
    //             $source['lvl2_title'] = $this->fnc_getMenuTitle($source['lvl2_pk'], $source['category']);
    //         }

    //         $source['category_name'] = $source['category'];
    //         if (isset($this->category[$source['category']])) {
    //             if ($this->val_lang == 'en') {
    //                 $source['category_name'] = $this->category_en[$source['category']];
    //             } else {
    //                 $source['category_name'] = $this->category[$source['category']];
    //             }
    //         }

    //         $source['create_dt'] = (!empty($source['time_update']) ? general::getDateFormatCMU($source['time_update']) : general::getDateFormatCMU($source['create_dt']));

    //         if ($this->val_lang == 'en') {
    //             if (!empty($source['title_en'])) {
    //                 $source['title'] = $source['title_en'];
    //             }
    //         }

    //         $data['list'][] = $source;
    //     }

    //     return $data;
    // }

    public function aggStoreType($query, $type)
    {
        $this->db->select('COUNT(t2.id_store) as doc_count, t1.id as key , IF(t1.fld_value'.($this->val_lang == 'th' ? '' : '_en').' <> "" OR t1.fld_value'.($this->val_lang == 'th' ? '' : '_en').' <> NULL, t1.fld_value'.($this->val_lang == 'th' ? '' : '_en').', t1.fld_value) as label');
        $this->db->where('t1.type_store', $type);
        $text = trim($query['command']['stext']);
        if($text != '') {
            $this->db->where('UPPER(SUBSTRING(t3.title, 1 ,1)) = "'.$text.'"');
        }
        $this->db->where('t3.show_status', 1);
        $this->db->join($this->manage_database_store_data_tbl.' t2', 't2.id_store = t1.id');
        $this->db->join($this->tbl.' t3', 't3.id = t2.id');
        $this->db->group_by('t1.id');
        $this->db->order_by('doc_count', 'desc');
        $data = $this->db->get($this->manage_database_store_type_tbl.' t1')->result_array();
        if(!empty($data)) {
            return $data;
        } else {
            return [];
        }
    }

    public function aggNameFilter()
    {
        $this->db->select("UPPER(SUBSTRING(title, 1 ,1)) as label");
        $this->db->where('show_status', 1);
        $this->db->group_by('SUBSTRING(title, 1 ,1) ASC');
        $data = $this->db->get($this->tbl)->result_array();

        if(!empty($data)) {
            return $data;
        } else {
            return [];
        }
    }

    private function fnc_getMenuTitle($id, $table)
    {

        $this->db->select('menu_name, menu_name_en');
        $this->db->where('menu_id', $id);
        $obj = $this->db->get('manage_'.$table)->row();

        if ($this->val_lang == 'en') {
            if (is_object($obj)) return $obj->menu_name_en;
            return 'Other';
        } else {
            if (is_object($obj)) return $obj->menu_name;
            return 'อื่นๆ';
        }

    }

    private function fnc_getMenuModuleLink($id, $table)
    {
        $this->db->where('menu_id', $id);
        $obj = $this->db->get('manage_'.$table)->row_array();
        if (!empty($obj) && ($obj['type_menu'] == 2 || $obj['type_menu'] == 3)) {
            if ($obj['type_menu'] == '2') {
                return ['target' => '_blank', 'url' => $obj['menu_link']];
            } else {
                return ['target' => '', 'url' => $this->fnc_getModuleUrl($obj['module_id'])];
            }
        } else {
            return null;
        }

    }

    private function fnc_getModuleUrl($id)
    {

        $this->db->select('url');
        $this->db->where('module_id', $id);
        $obj = $this->db->get($this->manage_menu_module_tbl)->row();

        if (is_object($obj)) return base_url() . $obj->url;
        return null;
    }

    public function getCategoryTitle($cate_news)
    {
        $this->db->select('category_name,category_name_en');
        $this->db->where('category_id', $cate_news);
        $rs = $this->db->get($this->category_news_tbl)->row_array();

        if ($this->language == 'en') {
            if (!empty($rs['category_name_en'])) {
                $rs['category_name'] = $rs['category_name_en'];
            }
        }

        return $rs['category_name'];
    }

    private function fnc_getNewsTitle($id)
    {

        $this->db->select('category_id, category_name,category_name_en');
        $this->db->where('category_id', $id);
        $data = $this->db->get($this->category_news_tbl)->row_array();

        $news = [];
        if(!empty($data)) {
            $name = $data['category_name'];

            if ($this->val_lang == 'en') {
                if (!empty($data['category_name_en'])) {
                    $name = $data['category_name_en'];
                }
            }
            $news[$data['category_id']] = $name;
        }
       
        if (isset($news[$id])) {
            return $news[$id];
        }  else {
            if ($this->val_lang == 'en') {
                return 'Other';
            } else {
                return 'อื่นๆ';
            }
        }
    }

    //##Pagination

    public function getPerPage()
    {
        return $this->per_page;
    }

    private function fnc_calPageOffset($page)
    {
        $offset = ($page * $this->per_page) - $this->per_page;

        $this->db->limit($this->per_page, $offset);
    }

    public function getMenuName()
    {
        $this->db->where('module_id', 5);
        $data = $this->db->get('manage_menu')->row_array();

        if(!empty($data)) {
            return ($this->val_lang == 'en' ? (!empty($data['menu_name_en']) ? $data['menu_name_en'] : $data['menu_name']) : $data['menu_name']);
        } else {
            return ($this->val_lang == 'en' ? 'e-Databases' :'ฐานข้อมูลอิเล็กทรอนิกส์');
        }
    }
}

?>
