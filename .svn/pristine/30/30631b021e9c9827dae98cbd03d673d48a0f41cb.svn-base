<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class ManageDatabaseStore_model extends CI_Model
{
    #เรียกตารางจากฐานข้อมูล

    private $tbl = 'manage_database_store';
    private $manage_database_store_type_tbl = 'manage_database_store_type';
    private $manage_database_store_data_tbl = 'manage_database_store_data';

    ##Pagination
    private $per_page = 10;

    ## Search
    private $s_element = array('stext' => FALSE, 'status' => 'all');

    ## Match data
    private $status = array('1' => 'เผยแพร่', '2' => 'ไม่เผยแพร่');

    public function __construct()
    {
        parent::__construct();
        $this->user_id = $this->session->cmu_web_session['id'];
    }

    public function getData($page)
    {
        $this->fnc_setElementSearchFromSession();
        $this->db->order_by('s_order', 'asc');
        $this->db->order_by('time_create', 'desc');
        $data = $this->db->get($this->tbl)->result_array();
        if (!empty($data)) {
            foreach ($data as $key => $value) {
                $value['title'] = !empty($value['title']) ? $value['title'] : '-';
                $value['show_status'] = !empty($value['show_status']) ? $value['show_status'] : '-';
                $get_data[] = $value;
            }
            return $get_data;
        }
        return false;

    }

    public function getListCount()
    {
        $this->fnc_setElementSearchFromSession();
        $data = $this->db->get($this->tbl)->result_array();
        $count = !empty($data) ? count($data) : 0;

        return $count;
    }

    public function getForm($id)
    {
        $resource_type = $this->fnc_databaseStoreType('resource_type');
        $branch = $this->fnc_databaseStoreType('branch');
        $subscription = $this->fnc_databaseStoreType('subscription');


        $getData = [
            'id' => "",
            'title' => "",
            'title_en' => "",
            'description' => "",
            'description_en' => "",
            'url' => "",
            'resource_type' => [],
            'branch' => [],
            'subscription' => [],
            'show_status' => "",
            'getResourceType' => $resource_type,
            'getBranch' => $branch,
            'getSubscription' => $subscription,
        ];

        if(!empty($id)) {
            $this->db->where('id', $id);
            $data = $this->db->get($this->tbl)->row_array();
            if (!empty($data)) {
                $dataStore = $this->fnc_getStoreData($id);
                if(!empty($dataStore['resource_type'])) {
                    $data['resource_type'] = $dataStore['resource_type'];
                } else {
                    $data['resource_type'] = [];
                }

                if(!empty($dataStore['branch'])) {
                    $data['branch'] = $dataStore['branch'];
                } else {
                    $data['branch'] = [];
                }

                if(!empty($dataStore['subscription'])) {
                    $data['subscription'] = $dataStore['subscription'];
                } else {
                    $data['subscription'] = [];
                }

                $data['getResourceType'] = $resource_type;
                $data['getBranch'] = $branch;
                $data['getSubscription'] = $subscription;
                return $data;
            } else {
                return $getData;
            }
        } else {
            
            return $getData;
        }
        
    }

    private function fnc_setStoreType($dataStore, $databaseStoreType)
    {
        if(!empty($dataStore) && !empty($databaseStoreType)) {
            $dataStoreExplode = explode(';', $dataStore);
            $dataStoreReturn = [];
            foreach($dataStoreExplode as $key => $value) {
                if(!empty($databaseStoreType[$value])) {
                    $dataStoreReturn[$value] = $databaseStoreType[$value];
                }
            }

            return $dataStoreReturn;
        } else {
            return null;
        }
    }

    private function fnc_databaseStoreType($type_store)
    {
        $this->db->where('type_store', $type_store);
        $data = $this->db->get($this->manage_database_store_type_tbl)->result_array();

        if (!empty($data)) {
            $getData = [];
            foreach ($data as $key => $value) {
                $getData[$value['id']] = $value['fld_value'].(!empty($value['fld_value_en']) ? ' ('.$value['fld_value_en'].')' : '');
            }

            return $getData;
        } else {
            return [];
        }

    }

    private function fnc_getStoreData($id)
    {
        $this->db->where('id', $id);
        $data = $this->db->get($this->manage_database_store_data_tbl)->result_array();

        if (!empty($data)) {
            $getData = [];
            foreach($data as $key => $value) {
                $getData[$value['type_store']][] = $value['id_store'];
            }
            return $getData;
        } else {
            return [];
        }

    }

    public function getSelectData($id)
    {
        $this->db->where('id', $id);
        $data = $this->db->get($this->tbl)->row_array();

        if (!empty($data)) {
            return $data;
        }
        return false;

    }

    public function selectNeweOrder()
    {
        $this->db->order_by('s_order', 'desc');
        $this->db->select('s_order');
        $last_no = $this->db->get($this->tbl)->row_array();
        return ($last_no['s_order'] + 1);
    }

    public function insertData($id)
    {
        // $last_no = $this->selectNeweOrder();
        $data = $this->input->post();        
        $setDataInsert = [];
        $setDataInsert['resource_type'] = $data['resource_type'];
        $setDataInsert['branch'] = $data['branch'];
        $setDataInsert['subscription'] = $data['subscription'];
        unset($data['resource_type'], $data['branch'], $data['subscription']);
        if(!empty($id)) {
            $dataByID = $this->getSelectData($id);
            if(!empty($dataByID)) {
                $Counter = new Counter;
                $Counter->logAction($dataByID['title'], $id, 0, 'database_store', '81', $this->user_id);
            }
            
            $this->db->where('id', $id);
            $this->db->update($this->tbl, $data);
            $this->db->delete($this->manage_database_store_data_tbl, ['id' => $id]);
        } else {
            $time_create = date('Y-m-d h:i:s');
            $data['time_create'] = date('Y-m-d h:i:s');
            $data['s_order'] = 0;
            $this->db->insert($this->tbl, $data);
            $id = $this->db->insert_id();
            $Counter = new Counter;
            $Counter->logAction($data['title'], $id, 0, 'database_store', '80', $this->user_id);
        }

        $dataInsert = ['resource_type', 'branch', 'subscription'];
        foreach($dataInsert as $key => $value) {
            if(!empty($setDataInsert[$value])) {
                foreach($setDataInsert[$value] as $k => $v) {
                    $this->db->insert($this->manage_database_store_data_tbl, ['id' => $id, 'id_store' => $v, 'type_store' => $value]);
                }
            }
        }
        
    }


    public function deleteData($id)
    {
        $dataByID = $this->getSelectData($id);
        if(!empty($dataByID)) {
            $Counter = new Counter;
            $Counter->logAction($dataByID['title'], $id, 0, 'database_store', '82', $this->user_id);
        }
        $this->db->where('id', $id);
        $this->db->delete($this->tbl);

        $this->db->where('id', $id);
        $this->db->delete($this->manage_database_store_data_tbl);
    }


    public function insertDataTypeStore()
    {
        if(!empty($this->input->post('type_store')) && !empty($this->input->post('type_store'))) {
            $this->db->where('type_store', $this->input->post('type_store'));
            $this->db->where('fld_value', $this->input->post('fld_value'));
            $data = $this->db->count_all_results($this->manage_database_store_type_tbl);
            if(empty($data)) {
                $this->db->insert($this->manage_database_store_type_tbl, [
                    'type_store' => $this->input->post('type_store'),
                    'fld_value' => $this->input->post('fld_value'),
                    'fld_value_en' => $this->input->post('fld_value_en'),
                    'time_create' => DATE('Y-m-d H:i:s'),
                    'user_create' => $this->user_id,
                ]);

                return $this->db->insert_id();
            } else {
                return 'dup';
            }
        } else {
            return 'nodata';
        }
    }


//     ## Search

    private function fnc_setElementSearchFromSession()
    {
        $form_search_element = $this->session->userdata('form_search_element');


        if ($form_search_element == null) {
            return;
        }
        foreach ($this->s_element as $key => $value) {
            if (isset($form_search_element['element'][$key]))
                $this->s_element[$key] = $form_search_element['element'][$key];
        }

        $stext = trim($this->db->escape_str($this->s_element['stext']));
        $status = $this->s_element['status'];

        if ($stext != '') {
            $this->db->where("(title LIKE '%{$stext}%')");
        }

        if ($status != 'all') {
            $this->db->where('show_status', $status);
        }
    }

    public function getSElement()
    {
        return $this->s_element;
    }

    public function saveOrder($id, $order)
    {
        $data = array(
            's_order' => $order
        );

        $this->db->where('id', $id);
        $this->db->update($this->tbl, $data);


        return 'เรียงลำดับข้อมูลแล้ว';
    }

//     ##Pagination

    public function getPerPage()
    {
        return $this->per_page;
    }

    private function fnc_calPageOffset($page)
    {
        $offset = ($page * $this->per_page) - $this->per_page;

        $this->db->limit($this->per_page, $offset);
    }


}

/* End of file New_model.php */
/* Location: ./application/models/New_model.php */